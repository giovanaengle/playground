evaluate:
  imgsz: 640 # The input image size for the model. Can be a single integer for square images or a tuple (width, height) for non-square, e.g., (640, 480).
  half: False # Enables FP16 (half-precision) inference, reducing memory usage and possibly increasing speed on compatible hardware. Use half=True to enable.
  int8: False # Activates INT8 quantization for further optimized performance on supported devices, especially useful for edge devices. Set int8=True to use.
  device: cpu # Defines the computation device(s) for benchmarking, such as "cpu" or "cuda:0".
  verbose: False # Controls the level of detail in logging output. Set verbose=True for detailed logs.
  format: onnx # Benchmark the model on a single export format. i.e format=onnx

export:
  format: torchscript # Target format for the exported model, such as 'onnx', 'torchscript', 'engine' (TensorRT), or others. Each format enables compatibility with different deployment environments.
  imgsz: 640 # Desired image size for the model input. Can be an integer for square images (e.g., 640 for 640Ã—640) or a tuple (height, width) for specific dimensions.
  keras: False # Enables export to Keras format for TensorFlow SavedModel, providing compatibility with TensorFlow serving and APIs.
  optimize: False # Applies optimization for mobile devices when exporting to TorchScript, potentially reducing model size and improving inference performance. Not compatible with NCNN format or CUDA devices.
  half: False # Enables FP16 (half-precision) quantization, reducing model size and potentially speeding up inference on supported hardware. Not compatible with INT8 quantization or CPU-only exports for ONNX.
  int8: False # Activates INT8 quantization, further compressing the model and speeding up inference with minimal accuracy loss, primarily for edge devices. When used with TensorRT, performs post-training quantization (PTQ).
  dynamic: False # Allows dynamic input sizes for ONNX, TensorRT and OpenVINO exports, enhancing flexibility in handling varying image dimensions. Automatically set to True when using TensorRT with INT8.
  simplify: True # Simplifies the model graph for ONNX exports with onnxslim, potentially improving performance and compatibility with inference engines.
  opset: null # Specifies the ONNX opset version for compatibility with different ONNX parsers and runtimes. If not set, uses the latest supported version.
  workspace: null # Sets the maximum workspace size in GiB for TensorRT optimizations, balancing memory usage and performance. Use None for auto-allocation by TensorRT up to device maximum.
  nms: False # Adds Non-Maximum Suppression (NMS) to the exported model when supported (see Export Formats), improving detection post-processing efficiency. Not available for end2end models.
  batch: 1 # Specifies export model batch inference size or the maximum number of images the exported model will process concurrently in predict mode. For Edge TPU exports, this is automatically set to 1.
  device: mps # Specifies the device for exporting: GPU (device=0), CPU (device=cpu), MPS for Apple silicon (device=mps) or DLA for NVIDIA Jetson (device=dla:0 or device=dla:1). TensorRT exports automatically use GPU.
  fraction: 1 #.0 Specifies the fraction of the dataset to use for INT8 quantization calibration. Allows for calibrating on a subset of the full dataset, useful for experiments or when resources are limited. If not specified with INT8 enabled, the full dataset will be used.

predict:
  conf: 0.25 # Sets the minimum confidence threshold for detections. Objects detected with confidence below this threshold will be disregarded. Adjusting this value can help reduce false positives.
  iou: 0.7 # Intersection Over Union (IoU) threshold for Non-Maximum Suppression (NMS). Lower values result in fewer detections by eliminating overlapping boxes, useful for reducing duplicates.
  imgsz: 640 # Defines the image size for inference. Can be a single integer 640 for square resizing or a (height, width) tuple. Proper sizing can improve detection accuracy and processing speed.
  rect: True # If enabled, minimally pads the shorter side of the image until it's divisible by stride to improve inference speed. If disabled, pads the image to a square during inference.
  half: False # Enables half-precision (FP16) inference, which can speed up model inference on supported GPUs with minimal impact on accuracy.
  device: mps # Specifies the device for inference (e.g., cpu, cuda:0 or 0). Allows users to select between CPU, a specific GPU, or other compute devices for model execution.
  batch: 1 # Specifies the batch size for inference (only works when the source is a directory, video file or .txt file). A larger batch size can provide higher throughput, shortening the total amount of time required for inference.
  max_det: 300 # Maximum number of detections allowed per image. Limits the total number of objects the model can detect in a single inference, preventing excessive outputs in dense scenes.
  vid_stride: 1 # Frame stride for video inputs. Allows skipping frames in videos to speed up processing at the cost of temporal resolution. A value of 1 processes every frame, higher values skip frames.
  stream_buffer: False # Determines whether to queue incoming frames for video streams. If False, old frames get dropped to accommodate new frames (optimized for real-time applications). If True, queues new frames in a buffer, ensuring no frames get skipped, but will cause latency if inference FPS is lower than stream FPS.
  visualize: False # Activates visualization of model features during inference, providing insights into what the model is "seeing". Useful for debugging and model interpretation.
  augment: False # Enables test-time augmentation (TTA) for predictions, potentially improving detection robustness at the cost of inference speed.
  agnostic_nms: False # Enables class-agnostic Non-Maximum Suppression (NMS), which merges overlapping boxes of different classes. Useful in multi-class detection scenarios where class overlap is common.
  classes: null # Filters predictions to a set of class IDs. Only detections belonging to the specified classes will be returned. Useful for focusing on relevant objects in multi-class detection tasks.
  retina_masks: False # Returns high-resolution segmentation masks. The returned masks (masks.data) will match the original image size if enabled. If disabled, they have the image size used during inference.
  embed: null # Specifies the layers from which to extract feature vectors or embeddings. Useful for downstream tasks like clustering or similarity search.
  stream: False # Enables memory-efficient processing for long videos or numerous images by returning a generator of Results objects instead of loading all frames into memory at once.
  verbose: True # Controls whether to display detailed inference logs in the terminal, providing real-time feedback on the prediction process.

train:
  epochs: 1 # Total number of training epochs. Each epoch represents a full pass over the entire dataset. Adjusting this value can affect training duration and model performance.
  time: null # Maximum training time in hours. If set, this overrides the epochs argument, allowing training to automatically stop after the specified duration. Useful for time-constrained training scenarios.
  patience: 10 # Number of epochs to wait without improvement in validation metrics before early stopping the training. Helps prevent overfitting by stopping training when performance plateaus.
  batch: 16 # Batch size, with three modes: set as an integer (e.g., batch=16), auto mode for 60% GPU memory utilization (batch=-1), or auto mode with specified utilization fraction (batch=0.70).
  imgsz: 640 # Target image size for training. All images are resized to this dimension before being fed into the model. Affects model accuracy and computational complexity.
  save: True # Enables saving of training checkpoints and final model weights. Useful for resuming training or model deployment.
  save_period: -1 # Frequency of saving model checkpoints, specified in epochs. A value of -1 disables this feature. Useful for saving interim models during long training sessions.
  cache: images # Enables caching of dataset images in memory (True/ram), on disk (disk), or disables it (False). Improves training speed by reducing disk I/O at the cost of increased memory usage.
  device: mps # Specifies the computational device(s) for training: a single GPU (device=0), multiple GPUs (device=0,1), CPU (device=cpu), or MPS for Apple silicon (device=mps).
  workers: 8 # Number of worker threads for data loading (per RANK if Multi-GPU training). Influences the speed of data preprocessing and feeding into the model, especially useful in multi-GPU setups.
  exist_ok: False # If True, allows overwriting of an existing project/name directory. Useful for iterative experimentation without needing to manually clear previous outputs.
  pretrained: True # Determines whether to start training from a pretrained model. Can be a boolean value or a string path to a specific model from which to load weights. Enhances training efficiency and model performance.
  optimizer: auto # Choice of optimizer for training. Options include SGD, Adam, AdamW, NAdam, RAdam, RMSProp etc., or auto for automatic selection based on model configuration. Affects convergence speed and stability.
  seed: 0 # Sets the random seed for training, ensuring reproducibility of results across runs with the same configurations.
  deterministic: True # Forces deterministic algorithm use, ensuring reproducibility but may affect performance and speed due to the restriction on non-deterministic algorithms.
  single_cls: False # Treats all classes in multi-class datasets as a single class during training. Useful for binary classification tasks or when focusing on object presence rather than classification.
  classes: null # Specifies a list of class IDs to train on. Useful for filtering out and focusing only on certain classes during training.
  rect: False # Enables rectangular training, optimizing batch composition for minimal padding. Can improve efficiency and speed but may affect model accuracy.
  cos_lr: False # Utilizes a cosine learning rate scheduler, adjusting the learning rate following a cosine curve over epochs. Helps in managing learning rate for better convergence.
  close_mosaic: 10 # Disables mosaic data augmentation in the last N epochs to stabilize training before completion. Setting to 0 disables this feature.
  resume: False # Resumes training from the last saved checkpoint. Automatically loads model weights, optimizer state, and epoch count, continuing training seamlessly.
  amp: True # Enables Automatic Mixed Precision (AMP) training, reducing memory usage and possibly speeding up training with minimal impact on accuracy.
  fraction: 1.0 # Specifies the fraction of the dataset to use for training. Allows for training on a subset of the full dataset, useful for experiments or when resources are limited.
  profile: False # Enables profiling of ONNX and TensorRT speeds during training, useful for optimizing model deployment.
  freeze: null # Freezes the first N layers of the model or specified layers by index, reducing the number of trainable parameters. Useful for fine-tuning or transfer learning.
  lr0: 0.01 # Initial learning rate (i.e. SGD=1E-2, Adam=1E-3) . Adjusting this value is crucial for the optimization process, influencing how rapidly model weights are updated.
  lrf: 0.01 # Final learning rate as a fraction of the initial rate = (lr0 * lrf), used in conjunction with schedulers to adjust the learning rate over time.
  momentum: 0.937 # Momentum factor for SGD or beta1 for Adam optimizers, influencing the incorporation of past gradients in the current update.
  weight_decay: 0.0005 # L2 regularization term, penalizing large weights to prevent overfitting.
  warmup_epochs: 3.0 # Number of epochs for learning rate warmup, gradually increasing the learning rate from a low value to the initial learning rate to stabilize training early on.
  warmup_momentum: 0.8 # Initial momentum for warmup phase, gradually adjusting to the set momentum over the warmup period.
  warmup_bias_lr: 0.1 # Learning rate for bias parameters during the warmup phase, helping stabilize model training in the initial epochs.
  box: 7.5 # Weight of the box loss component in the loss function, influencing how much emphasis is placed on accurately predicting bounding box coordinates.
  cls: 0.5 # Weight of the classification loss in the total loss function, affecting the importance of correct class prediction relative to other components.
  dfl: 1.5 # Weight of the distribution focal loss, used in certain YOLO versions for fine-grained classification.
  pose: 12.0 # Weight of the pose loss in models trained for pose estimation, influencing the emphasis on accurately predicting pose keypoints.
  kobj: 2.0 # Weight of the keypoint objectness loss in pose estimation models, balancing detection confidence with pose accuracy.
  nbs: 64 # Nominal batch size for normalization of loss.
  overlap_mask: True # Determines whether segmentation masks should overlap during training, applicable in instance segmentation tasks.
  mask_ratio: 4 # Downsample ratio for segmentation masks, affecting the resolution of masks used during training.
  dropout: 0.0 # Dropout rate for regularization in classification tasks, preventing overfitting by randomly omitting units during training.
  val: True # Enables validation during training, allowing for periodic evaluation of model performance on a separate dataset.
  plots: True # Generates and saves plots of training and validation metrics, as well as prediction examples, providing visual insights into model performance and learning progression.
  hsv_h: 0.015 # 0.0 - 1.0 Adjusts the hue of the image by a fraction of the color wheel, introducing color variability. Helps the model generalize across different lighting conditions.
  hsv_s: 0.7 # 0.0 - 1.0 Alters the saturation of the image by a fraction, affecting the intensity of colors. Useful for simulating different environmental conditions.
  hsv_v: 0.4 # 0.0 - 1.0 Modifies the value (brightness) of the image by a fraction, helping the model to perform well under various lighting conditions.
  degrees: 0.0 # 0.0 - 180 Rotates the image randomly within the specified degree range, improving the model's ability to recognize objects at various orientations.
  translate: 0.1 # 0.0 - 1.0 Translates the image horizontally and vertically by a fraction of the image size, aiding in learning to detect partially visible objects.
  scale: 0.5 # >=0.0 Scales the image by a gain factor, simulating objects at different distances from the camera.
  shear: 0.0 # -180 - +180 Shears the image by a specified degree, mimicking the effect of objects being viewed from different angles.
  perspective: 0.0 # 0.0 - 0.001 Applies a random perspective transformation to the image, enhancing the model's ability to understand objects in 3D space.
  flipud: 0.0 # 0.0 - 1.0 Flips the image upside down with the specified probability, increasing the data variability without affecting the object's characteristics.
  fliplr: 0.5 # 0.0 - 1.0 Flips the image left to right with the specified probability, useful for learning symmetrical objects and increasing dataset diversity.
  bgr: 0.0 # 0.0 - 1.0 Flips the image channels from RGB to BGR with the specified probability, useful for increasing robustness to incorrect channel ordering.
  mosaic: 1.0 # 0.0 - 1.0 Combines four training images into one, simulating different scene compositions and object interactions. Highly effective for complex scene understanding.
  mixup: 0.0 # 0.0 - 1.0 Blends two images and their labels, creating a composite image. Enhances the model's ability to generalize by introducing label noise and visual variability.
  cutmix: 0.0 # 0.0 - 1.0 Combines portions of two images, creating a partial blend while maintaining distinct regions. Enhances model robustness by creating occlusion scenarios.
  copy_paste: 0.0 # 0.0 - 1.0 Segmentation only. Copies and pastes objects across images to increase object instances.
  copy_paste_mode: flip # Segmentation only. Specifies the copy-paste strategy to use. Options include 'flip' and 'mixup'.
  auto_augment: randaugment # Classification only. Applies a predefined augmentation policy ('randaugment', 'autoaugment', or 'augmix') to enhance model performance through visual diversity.
  erasing: 0.4 # 0.0 - 0.9 Classification only. Randomly erases regions of the image during training to encourage the model to focus on less obvious features.

validate:
  imgsz: 640 # Defines the size of input images. All images are resized to this dimension before processing. Larger sizes may improve accuracy for small objects but increase computation time.
  batch: 16 # Sets the number of images per batch. Higher values utilize GPU memory more efficiently but require more VRAM. Adjust based on available hardware resources.
  save_json: False # If True, saves the results to a JSON file for further analysis, integration with other tools, or submission to evaluation servers like COCO.
  conf: 0.001 # Sets the minimum confidence threshold for detections. Lower values increase recall but may introduce more false positives. Used during validation to compute precision-recall curves.
  iou: 0.7 # Sets the Intersection Over Union threshold for Non-Maximum Suppression. Controls duplicate detection elimination.
  max_det: 300 # Limits the maximum number of detections per image. Useful in dense scenes to prevent excessive detections and manage computational resources.
  half: True # Enables half-precision (FP16) computation, reducing memory usage and potentially increasing speed with minimal impact on accuracy.
  device: mps # Specifies the device for validation (cpu, cuda:0, etc.). When null, automatically selects the best available device. Multiple CUDA devices can be specified with comma separation.
  dnn: False # If True, uses the OpenCV DNN module for ONNX model inference, offering an alternative to PyTorch inference methods.
  plots: True # When set to True, generates and saves plots of predictions versus ground truth, confusion matrices, and PR curves for visual evaluation of model performance.
  classes: null # Specifies a list of class IDs to train on. Useful for filtering out and focusing only on certain classes during evaluation.
  rect: True # If True, uses rectangular inference for batching, reducing padding and potentially increasing speed and efficiency by processing images in their original aspect ratio.
  split: test # Determines the dataset split to use for validation (val, test, or train). Allows flexibility in choosing the data segment for performance evaluation.
  verbose: False # If True, displays detailed information during the validation process, including per-class metrics, batch progress, and additional debugging information.
  save_txt: False # If True, saves detection results in text files, with one file per image, useful for further analysis, custom post-processing, or integration with other systems.
  save_conf: False # If True, includes confidence values in the saved text files when save_txt is enabled, providing more detailed output for analysis and filtering.
  workers: 8 # Number of worker threads for data loading. Higher values can speed up data preprocessing but may increase CPU usage. Setting to 0 uses main thread, which can be more stable in some environments.
  augment: False # Enables test-time augmentation (TTA) during validation, potentially improving detection accuracy at the cost of inference speed by running inference on transformed versions of the input.
  agnostic_nms: False # Enables class-agnostic Non-Maximum Suppression, which merges overlapping boxes regardless of their predicted class. Useful for instance-focused applications.
  single_cls: False # Treats all classes as a single class during validation. Useful for evaluating model performance on binary detection tasks or when class distinctions aren't important.